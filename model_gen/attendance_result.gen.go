// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newAttendanceResult(db *gorm.DB, opts ...gen.DOOption) attendanceResult {
	_attendanceResult := attendanceResult{}

	_attendanceResult.attendanceResultDo.UseDB(db, opts...)
	_attendanceResult.attendanceResultDo.UseModel(&model.AttendanceResult{})

	tableName := _attendanceResult.attendanceResultDo.TableName()
	_attendanceResult.ALL = field.NewAsterisk(tableName)
	_attendanceResult.ID = field.NewString(tableName, "id")
	_attendanceResult.UserID = field.NewString(tableName, "user_id")
	_attendanceResult.Onduty = field.NewString(tableName, "onduty")
	_attendanceResult.Offduty = field.NewString(tableName, "offduty")
	_attendanceResult.Day = field.NewString(tableName, "day")

	_attendanceResult.fillFieldMap()

	return _attendanceResult
}

type attendanceResult struct {
	attendanceResultDo

	ALL     field.Asterisk
	ID      field.String
	UserID  field.String
	Onduty  field.String
	Offduty field.String
	Day     field.String

	fieldMap map[string]field.Expr
}

func (a attendanceResult) Table(newTableName string) *attendanceResult {
	a.attendanceResultDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attendanceResult) As(alias string) *attendanceResult {
	a.attendanceResultDo.DO = *(a.attendanceResultDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attendanceResult) updateTableName(table string) *attendanceResult {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.UserID = field.NewString(table, "user_id")
	a.Onduty = field.NewString(table, "onduty")
	a.Offduty = field.NewString(table, "offduty")
	a.Day = field.NewString(table, "day")

	a.fillFieldMap()

	return a
}

func (a *attendanceResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attendanceResult) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["onduty"] = a.Onduty
	a.fieldMap["offduty"] = a.Offduty
	a.fieldMap["day"] = a.Day
}

func (a attendanceResult) clone(db *gorm.DB) attendanceResult {
	a.attendanceResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attendanceResult) replaceDB(db *gorm.DB) attendanceResult {
	a.attendanceResultDo.ReplaceDB(db)
	return a
}

type attendanceResultDo struct{ gen.DO }

type IAttendanceResultDo interface {
	gen.SubQuery
	Debug() IAttendanceResultDo
	WithContext(ctx context.Context) IAttendanceResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttendanceResultDo
	WriteDB() IAttendanceResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttendanceResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttendanceResultDo
	Not(conds ...gen.Condition) IAttendanceResultDo
	Or(conds ...gen.Condition) IAttendanceResultDo
	Select(conds ...field.Expr) IAttendanceResultDo
	Where(conds ...gen.Condition) IAttendanceResultDo
	Order(conds ...field.Expr) IAttendanceResultDo
	Distinct(cols ...field.Expr) IAttendanceResultDo
	Omit(cols ...field.Expr) IAttendanceResultDo
	Join(table schema.Tabler, on ...field.Expr) IAttendanceResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceResultDo
	Group(cols ...field.Expr) IAttendanceResultDo
	Having(conds ...gen.Condition) IAttendanceResultDo
	Limit(limit int) IAttendanceResultDo
	Offset(offset int) IAttendanceResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceResultDo
	Unscoped() IAttendanceResultDo
	Create(values ...*model.AttendanceResult) error
	CreateInBatches(values []*model.AttendanceResult, batchSize int) error
	Save(values ...*model.AttendanceResult) error
	First() (*model.AttendanceResult, error)
	Take() (*model.AttendanceResult, error)
	Last() (*model.AttendanceResult, error)
	Find() ([]*model.AttendanceResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceResult, err error)
	FindInBatches(result *[]*model.AttendanceResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AttendanceResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttendanceResultDo
	Assign(attrs ...field.AssignExpr) IAttendanceResultDo
	Joins(fields ...field.RelationField) IAttendanceResultDo
	Preload(fields ...field.RelationField) IAttendanceResultDo
	FirstOrInit() (*model.AttendanceResult, error)
	FirstOrCreate() (*model.AttendanceResult, error)
	FindByPage(offset int, limit int) (result []*model.AttendanceResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttendanceResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attendanceResultDo) Debug() IAttendanceResultDo {
	return a.withDO(a.DO.Debug())
}

func (a attendanceResultDo) WithContext(ctx context.Context) IAttendanceResultDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attendanceResultDo) ReadDB() IAttendanceResultDo {
	return a.Clauses(dbresolver.Read)
}

func (a attendanceResultDo) WriteDB() IAttendanceResultDo {
	return a.Clauses(dbresolver.Write)
}

func (a attendanceResultDo) Session(config *gorm.Session) IAttendanceResultDo {
	return a.withDO(a.DO.Session(config))
}

func (a attendanceResultDo) Clauses(conds ...clause.Expression) IAttendanceResultDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attendanceResultDo) Returning(value interface{}, columns ...string) IAttendanceResultDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attendanceResultDo) Not(conds ...gen.Condition) IAttendanceResultDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attendanceResultDo) Or(conds ...gen.Condition) IAttendanceResultDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attendanceResultDo) Select(conds ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attendanceResultDo) Where(conds ...gen.Condition) IAttendanceResultDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attendanceResultDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAttendanceResultDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a attendanceResultDo) Order(conds ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attendanceResultDo) Distinct(cols ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attendanceResultDo) Omit(cols ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attendanceResultDo) Join(table schema.Tabler, on ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attendanceResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attendanceResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attendanceResultDo) Group(cols ...field.Expr) IAttendanceResultDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attendanceResultDo) Having(conds ...gen.Condition) IAttendanceResultDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attendanceResultDo) Limit(limit int) IAttendanceResultDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attendanceResultDo) Offset(offset int) IAttendanceResultDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attendanceResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceResultDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attendanceResultDo) Unscoped() IAttendanceResultDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attendanceResultDo) Create(values ...*model.AttendanceResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attendanceResultDo) CreateInBatches(values []*model.AttendanceResult, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attendanceResultDo) Save(values ...*model.AttendanceResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attendanceResultDo) First() (*model.AttendanceResult, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceResult), nil
	}
}

func (a attendanceResultDo) Take() (*model.AttendanceResult, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceResult), nil
	}
}

func (a attendanceResultDo) Last() (*model.AttendanceResult, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceResult), nil
	}
}

func (a attendanceResultDo) Find() ([]*model.AttendanceResult, error) {
	result, err := a.DO.Find()
	return result.([]*model.AttendanceResult), err
}

func (a attendanceResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceResult, err error) {
	buf := make([]*model.AttendanceResult, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attendanceResultDo) FindInBatches(result *[]*model.AttendanceResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attendanceResultDo) Attrs(attrs ...field.AssignExpr) IAttendanceResultDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attendanceResultDo) Assign(attrs ...field.AssignExpr) IAttendanceResultDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attendanceResultDo) Joins(fields ...field.RelationField) IAttendanceResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attendanceResultDo) Preload(fields ...field.RelationField) IAttendanceResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attendanceResultDo) FirstOrInit() (*model.AttendanceResult, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceResult), nil
	}
}

func (a attendanceResultDo) FirstOrCreate() (*model.AttendanceResult, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceResult), nil
	}
}

func (a attendanceResultDo) FindByPage(offset int, limit int) (result []*model.AttendanceResult, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attendanceResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attendanceResultDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attendanceResultDo) Delete(models ...*model.AttendanceResult) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attendanceResultDo) withDO(do gen.Dao) *attendanceResultDo {
	a.DO = *do.(*gen.DO)
	return a
}
