// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newAuthUserGroups(db *gorm.DB, opts ...gen.DOOption) authUserGroups {
	_authUserGroups := authUserGroups{}

	_authUserGroups.authUserGroupsDo.UseDB(db, opts...)
	_authUserGroups.authUserGroupsDo.UseModel(&model.AuthUserGroups{})

	tableName := _authUserGroups.authUserGroupsDo.TableName()
	_authUserGroups.ALL = field.NewAsterisk(tableName)
	_authUserGroups.ID = field.NewInt32(tableName, "id")
	_authUserGroups.UserID = field.NewInt32(tableName, "user_id")
	_authUserGroups.GroupID = field.NewInt32(tableName, "group_id")

	_authUserGroups.fillFieldMap()

	return _authUserGroups
}

type authUserGroups struct {
	authUserGroupsDo

	ALL     field.Asterisk
	ID      field.Int32
	UserID  field.Int32
	GroupID field.Int32

	fieldMap map[string]field.Expr
}

func (a authUserGroups) Table(newTableName string) *authUserGroups {
	a.authUserGroupsDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authUserGroups) As(alias string) *authUserGroups {
	a.authUserGroupsDo.DO = *(a.authUserGroupsDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authUserGroups) updateTableName(table string) *authUserGroups {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.UserID = field.NewInt32(table, "user_id")
	a.GroupID = field.NewInt32(table, "group_id")

	a.fillFieldMap()

	return a
}

func (a *authUserGroups) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authUserGroups) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["group_id"] = a.GroupID
}

func (a authUserGroups) clone(db *gorm.DB) authUserGroups {
	a.authUserGroupsDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authUserGroups) replaceDB(db *gorm.DB) authUserGroups {
	a.authUserGroupsDo.ReplaceDB(db)
	return a
}

type authUserGroupsDo struct{ gen.DO }

type IAuthUserGroupsDo interface {
	gen.SubQuery
	Debug() IAuthUserGroupsDo
	WithContext(ctx context.Context) IAuthUserGroupsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthUserGroupsDo
	WriteDB() IAuthUserGroupsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthUserGroupsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthUserGroupsDo
	Not(conds ...gen.Condition) IAuthUserGroupsDo
	Or(conds ...gen.Condition) IAuthUserGroupsDo
	Select(conds ...field.Expr) IAuthUserGroupsDo
	Where(conds ...gen.Condition) IAuthUserGroupsDo
	Order(conds ...field.Expr) IAuthUserGroupsDo
	Distinct(cols ...field.Expr) IAuthUserGroupsDo
	Omit(cols ...field.Expr) IAuthUserGroupsDo
	Join(table schema.Tabler, on ...field.Expr) IAuthUserGroupsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthUserGroupsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthUserGroupsDo
	Group(cols ...field.Expr) IAuthUserGroupsDo
	Having(conds ...gen.Condition) IAuthUserGroupsDo
	Limit(limit int) IAuthUserGroupsDo
	Offset(offset int) IAuthUserGroupsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthUserGroupsDo
	Unscoped() IAuthUserGroupsDo
	Create(values ...*model.AuthUserGroups) error
	CreateInBatches(values []*model.AuthUserGroups, batchSize int) error
	Save(values ...*model.AuthUserGroups) error
	First() (*model.AuthUserGroups, error)
	Take() (*model.AuthUserGroups, error)
	Last() (*model.AuthUserGroups, error)
	Find() ([]*model.AuthUserGroups, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthUserGroups, err error)
	FindInBatches(result *[]*model.AuthUserGroups, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthUserGroups) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthUserGroupsDo
	Assign(attrs ...field.AssignExpr) IAuthUserGroupsDo
	Joins(fields ...field.RelationField) IAuthUserGroupsDo
	Preload(fields ...field.RelationField) IAuthUserGroupsDo
	FirstOrInit() (*model.AuthUserGroups, error)
	FirstOrCreate() (*model.AuthUserGroups, error)
	FindByPage(offset int, limit int) (result []*model.AuthUserGroups, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthUserGroupsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authUserGroupsDo) Debug() IAuthUserGroupsDo {
	return a.withDO(a.DO.Debug())
}

func (a authUserGroupsDo) WithContext(ctx context.Context) IAuthUserGroupsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authUserGroupsDo) ReadDB() IAuthUserGroupsDo {
	return a.Clauses(dbresolver.Read)
}

func (a authUserGroupsDo) WriteDB() IAuthUserGroupsDo {
	return a.Clauses(dbresolver.Write)
}

func (a authUserGroupsDo) Session(config *gorm.Session) IAuthUserGroupsDo {
	return a.withDO(a.DO.Session(config))
}

func (a authUserGroupsDo) Clauses(conds ...clause.Expression) IAuthUserGroupsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authUserGroupsDo) Returning(value interface{}, columns ...string) IAuthUserGroupsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authUserGroupsDo) Not(conds ...gen.Condition) IAuthUserGroupsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authUserGroupsDo) Or(conds ...gen.Condition) IAuthUserGroupsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authUserGroupsDo) Select(conds ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authUserGroupsDo) Where(conds ...gen.Condition) IAuthUserGroupsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authUserGroupsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthUserGroupsDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authUserGroupsDo) Order(conds ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authUserGroupsDo) Distinct(cols ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authUserGroupsDo) Omit(cols ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authUserGroupsDo) Join(table schema.Tabler, on ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authUserGroupsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authUserGroupsDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authUserGroupsDo) Group(cols ...field.Expr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authUserGroupsDo) Having(conds ...gen.Condition) IAuthUserGroupsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authUserGroupsDo) Limit(limit int) IAuthUserGroupsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authUserGroupsDo) Offset(offset int) IAuthUserGroupsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authUserGroupsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthUserGroupsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authUserGroupsDo) Unscoped() IAuthUserGroupsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authUserGroupsDo) Create(values ...*model.AuthUserGroups) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authUserGroupsDo) CreateInBatches(values []*model.AuthUserGroups, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authUserGroupsDo) Save(values ...*model.AuthUserGroups) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authUserGroupsDo) First() (*model.AuthUserGroups, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserGroups), nil
	}
}

func (a authUserGroupsDo) Take() (*model.AuthUserGroups, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserGroups), nil
	}
}

func (a authUserGroupsDo) Last() (*model.AuthUserGroups, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserGroups), nil
	}
}

func (a authUserGroupsDo) Find() ([]*model.AuthUserGroups, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthUserGroups), err
}

func (a authUserGroupsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthUserGroups, err error) {
	buf := make([]*model.AuthUserGroups, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authUserGroupsDo) FindInBatches(result *[]*model.AuthUserGroups, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authUserGroupsDo) Attrs(attrs ...field.AssignExpr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authUserGroupsDo) Assign(attrs ...field.AssignExpr) IAuthUserGroupsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authUserGroupsDo) Joins(fields ...field.RelationField) IAuthUserGroupsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authUserGroupsDo) Preload(fields ...field.RelationField) IAuthUserGroupsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authUserGroupsDo) FirstOrInit() (*model.AuthUserGroups, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserGroups), nil
	}
}

func (a authUserGroupsDo) FirstOrCreate() (*model.AuthUserGroups, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserGroups), nil
	}
}

func (a authUserGroupsDo) FindByPage(offset int, limit int) (result []*model.AuthUserGroups, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authUserGroupsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authUserGroupsDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authUserGroupsDo) Delete(models ...*model.AuthUserGroups) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authUserGroupsDo) withDO(do gen.Dao) *authUserGroupsDo {
	a.DO = *do.(*gen.DO)
	return a
}
