// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newAuthUserUserPermissions(db *gorm.DB, opts ...gen.DOOption) authUserUserPermissions {
	_authUserUserPermissions := authUserUserPermissions{}

	_authUserUserPermissions.authUserUserPermissionsDo.UseDB(db, opts...)
	_authUserUserPermissions.authUserUserPermissionsDo.UseModel(&model.AuthUserUserPermissions{})

	tableName := _authUserUserPermissions.authUserUserPermissionsDo.TableName()
	_authUserUserPermissions.ALL = field.NewAsterisk(tableName)
	_authUserUserPermissions.ID = field.NewInt32(tableName, "id")
	_authUserUserPermissions.UserID = field.NewInt32(tableName, "user_id")
	_authUserUserPermissions.PermissionID = field.NewInt32(tableName, "permission_id")

	_authUserUserPermissions.fillFieldMap()

	return _authUserUserPermissions
}

type authUserUserPermissions struct {
	authUserUserPermissionsDo

	ALL          field.Asterisk
	ID           field.Int32
	UserID       field.Int32
	PermissionID field.Int32

	fieldMap map[string]field.Expr
}

func (a authUserUserPermissions) Table(newTableName string) *authUserUserPermissions {
	a.authUserUserPermissionsDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authUserUserPermissions) As(alias string) *authUserUserPermissions {
	a.authUserUserPermissionsDo.DO = *(a.authUserUserPermissionsDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authUserUserPermissions) updateTableName(table string) *authUserUserPermissions {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.UserID = field.NewInt32(table, "user_id")
	a.PermissionID = field.NewInt32(table, "permission_id")

	a.fillFieldMap()

	return a
}

func (a *authUserUserPermissions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authUserUserPermissions) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["permission_id"] = a.PermissionID
}

func (a authUserUserPermissions) clone(db *gorm.DB) authUserUserPermissions {
	a.authUserUserPermissionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authUserUserPermissions) replaceDB(db *gorm.DB) authUserUserPermissions {
	a.authUserUserPermissionsDo.ReplaceDB(db)
	return a
}

type authUserUserPermissionsDo struct{ gen.DO }

type IAuthUserUserPermissionsDo interface {
	gen.SubQuery
	Debug() IAuthUserUserPermissionsDo
	WithContext(ctx context.Context) IAuthUserUserPermissionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthUserUserPermissionsDo
	WriteDB() IAuthUserUserPermissionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthUserUserPermissionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthUserUserPermissionsDo
	Not(conds ...gen.Condition) IAuthUserUserPermissionsDo
	Or(conds ...gen.Condition) IAuthUserUserPermissionsDo
	Select(conds ...field.Expr) IAuthUserUserPermissionsDo
	Where(conds ...gen.Condition) IAuthUserUserPermissionsDo
	Order(conds ...field.Expr) IAuthUserUserPermissionsDo
	Distinct(cols ...field.Expr) IAuthUserUserPermissionsDo
	Omit(cols ...field.Expr) IAuthUserUserPermissionsDo
	Join(table schema.Tabler, on ...field.Expr) IAuthUserUserPermissionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthUserUserPermissionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthUserUserPermissionsDo
	Group(cols ...field.Expr) IAuthUserUserPermissionsDo
	Having(conds ...gen.Condition) IAuthUserUserPermissionsDo
	Limit(limit int) IAuthUserUserPermissionsDo
	Offset(offset int) IAuthUserUserPermissionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthUserUserPermissionsDo
	Unscoped() IAuthUserUserPermissionsDo
	Create(values ...*model.AuthUserUserPermissions) error
	CreateInBatches(values []*model.AuthUserUserPermissions, batchSize int) error
	Save(values ...*model.AuthUserUserPermissions) error
	First() (*model.AuthUserUserPermissions, error)
	Take() (*model.AuthUserUserPermissions, error)
	Last() (*model.AuthUserUserPermissions, error)
	Find() ([]*model.AuthUserUserPermissions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthUserUserPermissions, err error)
	FindInBatches(result *[]*model.AuthUserUserPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthUserUserPermissions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthUserUserPermissionsDo
	Assign(attrs ...field.AssignExpr) IAuthUserUserPermissionsDo
	Joins(fields ...field.RelationField) IAuthUserUserPermissionsDo
	Preload(fields ...field.RelationField) IAuthUserUserPermissionsDo
	FirstOrInit() (*model.AuthUserUserPermissions, error)
	FirstOrCreate() (*model.AuthUserUserPermissions, error)
	FindByPage(offset int, limit int) (result []*model.AuthUserUserPermissions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthUserUserPermissionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authUserUserPermissionsDo) Debug() IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Debug())
}

func (a authUserUserPermissionsDo) WithContext(ctx context.Context) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authUserUserPermissionsDo) ReadDB() IAuthUserUserPermissionsDo {
	return a.Clauses(dbresolver.Read)
}

func (a authUserUserPermissionsDo) WriteDB() IAuthUserUserPermissionsDo {
	return a.Clauses(dbresolver.Write)
}

func (a authUserUserPermissionsDo) Session(config *gorm.Session) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Session(config))
}

func (a authUserUserPermissionsDo) Clauses(conds ...clause.Expression) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authUserUserPermissionsDo) Returning(value interface{}, columns ...string) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authUserUserPermissionsDo) Not(conds ...gen.Condition) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authUserUserPermissionsDo) Or(conds ...gen.Condition) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authUserUserPermissionsDo) Select(conds ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authUserUserPermissionsDo) Where(conds ...gen.Condition) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authUserUserPermissionsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthUserUserPermissionsDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authUserUserPermissionsDo) Order(conds ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authUserUserPermissionsDo) Distinct(cols ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authUserUserPermissionsDo) Omit(cols ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authUserUserPermissionsDo) Join(table schema.Tabler, on ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authUserUserPermissionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authUserUserPermissionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authUserUserPermissionsDo) Group(cols ...field.Expr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authUserUserPermissionsDo) Having(conds ...gen.Condition) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authUserUserPermissionsDo) Limit(limit int) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authUserUserPermissionsDo) Offset(offset int) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authUserUserPermissionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authUserUserPermissionsDo) Unscoped() IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authUserUserPermissionsDo) Create(values ...*model.AuthUserUserPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authUserUserPermissionsDo) CreateInBatches(values []*model.AuthUserUserPermissions, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authUserUserPermissionsDo) Save(values ...*model.AuthUserUserPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authUserUserPermissionsDo) First() (*model.AuthUserUserPermissions, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserUserPermissions), nil
	}
}

func (a authUserUserPermissionsDo) Take() (*model.AuthUserUserPermissions, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserUserPermissions), nil
	}
}

func (a authUserUserPermissionsDo) Last() (*model.AuthUserUserPermissions, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserUserPermissions), nil
	}
}

func (a authUserUserPermissionsDo) Find() ([]*model.AuthUserUserPermissions, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthUserUserPermissions), err
}

func (a authUserUserPermissionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthUserUserPermissions, err error) {
	buf := make([]*model.AuthUserUserPermissions, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authUserUserPermissionsDo) FindInBatches(result *[]*model.AuthUserUserPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authUserUserPermissionsDo) Attrs(attrs ...field.AssignExpr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authUserUserPermissionsDo) Assign(attrs ...field.AssignExpr) IAuthUserUserPermissionsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authUserUserPermissionsDo) Joins(fields ...field.RelationField) IAuthUserUserPermissionsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authUserUserPermissionsDo) Preload(fields ...field.RelationField) IAuthUserUserPermissionsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authUserUserPermissionsDo) FirstOrInit() (*model.AuthUserUserPermissions, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserUserPermissions), nil
	}
}

func (a authUserUserPermissionsDo) FirstOrCreate() (*model.AuthUserUserPermissions, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserUserPermissions), nil
	}
}

func (a authUserUserPermissionsDo) FindByPage(offset int, limit int) (result []*model.AuthUserUserPermissions, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authUserUserPermissionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authUserUserPermissionsDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authUserUserPermissionsDo) Delete(models ...*model.AuthUserUserPermissions) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authUserUserPermissionsDo) withDO(do gen.Dao) *authUserUserPermissionsDo {
	a.DO = *do.(*gen.DO)
	return a
}
