// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newCollectEvent(db *gorm.DB, opts ...gen.DOOption) collectEvent {
	_collectEvent := collectEvent{}

	_collectEvent.collectEventDo.UseDB(db, opts...)
	_collectEvent.collectEventDo.UseModel(&model.CollectEvent{})

	tableName := _collectEvent.collectEventDo.TableName()
	_collectEvent.ALL = field.NewAsterisk(tableName)
	_collectEvent.EventID = field.NewString(tableName, "event_id")
	_collectEvent.Group_ = field.NewString(tableName, "group")
	_collectEvent.Tag = field.NewString(tableName, "tag")
	_collectEvent.FromService = field.NewString(tableName, "from_service")
	_collectEvent.ToService = field.NewString(tableName, "to_service")
	_collectEvent.Params = field.NewString(tableName, "params")
	_collectEvent.Success = field.NewString(tableName, "success")
	_collectEvent.Result = field.NewString(tableName, "result")
	_collectEvent.Msg = field.NewString(tableName, "msg")
	_collectEvent.CreateUserID = field.NewString(tableName, "create_user_id")
	_collectEvent.CreateTime = field.NewTime(tableName, "create_time")
	_collectEvent.ExcuteTime = field.NewTime(tableName, "excute_time")
	_collectEvent.FinishTime = field.NewTime(tableName, "finish_time")

	_collectEvent.fillFieldMap()

	return _collectEvent
}

type collectEvent struct {
	collectEventDo

	ALL          field.Asterisk
	EventID      field.String
	Group_       field.String
	Tag          field.String
	FromService  field.String
	ToService    field.String
	Params       field.String
	Success      field.String
	Result       field.String
	Msg          field.String
	CreateUserID field.String
	CreateTime   field.Time
	ExcuteTime   field.Time
	FinishTime   field.Time

	fieldMap map[string]field.Expr
}

func (c collectEvent) Table(newTableName string) *collectEvent {
	c.collectEventDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collectEvent) As(alias string) *collectEvent {
	c.collectEventDo.DO = *(c.collectEventDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collectEvent) updateTableName(table string) *collectEvent {
	c.ALL = field.NewAsterisk(table)
	c.EventID = field.NewString(table, "event_id")
	c.Group_ = field.NewString(table, "group")
	c.Tag = field.NewString(table, "tag")
	c.FromService = field.NewString(table, "from_service")
	c.ToService = field.NewString(table, "to_service")
	c.Params = field.NewString(table, "params")
	c.Success = field.NewString(table, "success")
	c.Result = field.NewString(table, "result")
	c.Msg = field.NewString(table, "msg")
	c.CreateUserID = field.NewString(table, "create_user_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.ExcuteTime = field.NewTime(table, "excute_time")
	c.FinishTime = field.NewTime(table, "finish_time")

	c.fillFieldMap()

	return c
}

func (c *collectEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collectEvent) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["event_id"] = c.EventID
	c.fieldMap["group"] = c.Group_
	c.fieldMap["tag"] = c.Tag
	c.fieldMap["from_service"] = c.FromService
	c.fieldMap["to_service"] = c.ToService
	c.fieldMap["params"] = c.Params
	c.fieldMap["success"] = c.Success
	c.fieldMap["result"] = c.Result
	c.fieldMap["msg"] = c.Msg
	c.fieldMap["create_user_id"] = c.CreateUserID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["excute_time"] = c.ExcuteTime
	c.fieldMap["finish_time"] = c.FinishTime
}

func (c collectEvent) clone(db *gorm.DB) collectEvent {
	c.collectEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collectEvent) replaceDB(db *gorm.DB) collectEvent {
	c.collectEventDo.ReplaceDB(db)
	return c
}

type collectEventDo struct{ gen.DO }

type ICollectEventDo interface {
	gen.SubQuery
	Debug() ICollectEventDo
	WithContext(ctx context.Context) ICollectEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICollectEventDo
	WriteDB() ICollectEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICollectEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICollectEventDo
	Not(conds ...gen.Condition) ICollectEventDo
	Or(conds ...gen.Condition) ICollectEventDo
	Select(conds ...field.Expr) ICollectEventDo
	Where(conds ...gen.Condition) ICollectEventDo
	Order(conds ...field.Expr) ICollectEventDo
	Distinct(cols ...field.Expr) ICollectEventDo
	Omit(cols ...field.Expr) ICollectEventDo
	Join(table schema.Tabler, on ...field.Expr) ICollectEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICollectEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICollectEventDo
	Group(cols ...field.Expr) ICollectEventDo
	Having(conds ...gen.Condition) ICollectEventDo
	Limit(limit int) ICollectEventDo
	Offset(offset int) ICollectEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectEventDo
	Unscoped() ICollectEventDo
	Create(values ...*model.CollectEvent) error
	CreateInBatches(values []*model.CollectEvent, batchSize int) error
	Save(values ...*model.CollectEvent) error
	First() (*model.CollectEvent, error)
	Take() (*model.CollectEvent, error)
	Last() (*model.CollectEvent, error)
	Find() ([]*model.CollectEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectEvent, err error)
	FindInBatches(result *[]*model.CollectEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CollectEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICollectEventDo
	Assign(attrs ...field.AssignExpr) ICollectEventDo
	Joins(fields ...field.RelationField) ICollectEventDo
	Preload(fields ...field.RelationField) ICollectEventDo
	FirstOrInit() (*model.CollectEvent, error)
	FirstOrCreate() (*model.CollectEvent, error)
	FindByPage(offset int, limit int) (result []*model.CollectEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICollectEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c collectEventDo) Debug() ICollectEventDo {
	return c.withDO(c.DO.Debug())
}

func (c collectEventDo) WithContext(ctx context.Context) ICollectEventDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectEventDo) ReadDB() ICollectEventDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectEventDo) WriteDB() ICollectEventDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectEventDo) Session(config *gorm.Session) ICollectEventDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectEventDo) Clauses(conds ...clause.Expression) ICollectEventDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectEventDo) Returning(value interface{}, columns ...string) ICollectEventDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectEventDo) Not(conds ...gen.Condition) ICollectEventDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectEventDo) Or(conds ...gen.Condition) ICollectEventDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectEventDo) Select(conds ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectEventDo) Where(conds ...gen.Condition) ICollectEventDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICollectEventDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c collectEventDo) Order(conds ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectEventDo) Distinct(cols ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectEventDo) Omit(cols ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectEventDo) Join(table schema.Tabler, on ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectEventDo) RightJoin(table schema.Tabler, on ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectEventDo) Group(cols ...field.Expr) ICollectEventDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectEventDo) Having(conds ...gen.Condition) ICollectEventDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectEventDo) Limit(limit int) ICollectEventDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectEventDo) Offset(offset int) ICollectEventDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectEventDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectEventDo) Unscoped() ICollectEventDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectEventDo) Create(values ...*model.CollectEvent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectEventDo) CreateInBatches(values []*model.CollectEvent, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectEventDo) Save(values ...*model.CollectEvent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectEventDo) First() (*model.CollectEvent, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectEvent), nil
	}
}

func (c collectEventDo) Take() (*model.CollectEvent, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectEvent), nil
	}
}

func (c collectEventDo) Last() (*model.CollectEvent, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectEvent), nil
	}
}

func (c collectEventDo) Find() ([]*model.CollectEvent, error) {
	result, err := c.DO.Find()
	return result.([]*model.CollectEvent), err
}

func (c collectEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectEvent, err error) {
	buf := make([]*model.CollectEvent, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectEventDo) FindInBatches(result *[]*model.CollectEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectEventDo) Attrs(attrs ...field.AssignExpr) ICollectEventDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectEventDo) Assign(attrs ...field.AssignExpr) ICollectEventDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectEventDo) Joins(fields ...field.RelationField) ICollectEventDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectEventDo) Preload(fields ...field.RelationField) ICollectEventDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectEventDo) FirstOrInit() (*model.CollectEvent, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectEvent), nil
	}
}

func (c collectEventDo) FirstOrCreate() (*model.CollectEvent, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectEvent), nil
	}
}

func (c collectEventDo) FindByPage(offset int, limit int) (result []*model.CollectEvent, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectEventDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectEventDo) Delete(models ...*model.CollectEvent) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectEventDo) withDO(do gen.Dao) *collectEventDo {
	c.DO = *do.(*gen.DO)
	return c
}
