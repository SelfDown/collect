// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newConfigDetailChangeHistory(db *gorm.DB, opts ...gen.DOOption) configDetailChangeHistory {
	_configDetailChangeHistory := configDetailChangeHistory{}

	_configDetailChangeHistory.configDetailChangeHistoryDo.UseDB(db, opts...)
	_configDetailChangeHistory.configDetailChangeHistoryDo.UseModel(&model.ConfigDetailChangeHistory{})

	tableName := _configDetailChangeHistory.configDetailChangeHistoryDo.TableName()
	_configDetailChangeHistory.ALL = field.NewAsterisk(tableName)
	_configDetailChangeHistory.ChangeID = field.NewString(tableName, "change_id")
	_configDetailChangeHistory.Before = field.NewString(tableName, "before")
	_configDetailChangeHistory.After = field.NewString(tableName, "after")
	_configDetailChangeHistory.Field = field.NewString(tableName, "field")
	_configDetailChangeHistory.Value = field.NewString(tableName, "value")
	_configDetailChangeHistory.Name = field.NewString(tableName, "name")
	_configDetailChangeHistory.NameCopy = field.NewString(tableName, "name_copy")
	_configDetailChangeHistory.ConfigDetailID = field.NewString(tableName, "config_detail_id")
	_configDetailChangeHistory.CreateUser = field.NewString(tableName, "create_user")
	_configDetailChangeHistory.CreateTime = field.NewString(tableName, "create_time")
	_configDetailChangeHistory.Operation = field.NewString(tableName, "operation")
	_configDetailChangeHistory.GroupID = field.NewString(tableName, "group_id")

	_configDetailChangeHistory.fillFieldMap()

	return _configDetailChangeHistory
}

type configDetailChangeHistory struct {
	configDetailChangeHistoryDo

	ALL            field.Asterisk
	ChangeID       field.String
	Before         field.String
	After          field.String
	Field          field.String
	Value          field.String
	Name           field.String
	NameCopy       field.String
	ConfigDetailID field.String
	CreateUser     field.String
	CreateTime     field.String
	Operation      field.String
	GroupID        field.String

	fieldMap map[string]field.Expr
}

func (c configDetailChangeHistory) Table(newTableName string) *configDetailChangeHistory {
	c.configDetailChangeHistoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configDetailChangeHistory) As(alias string) *configDetailChangeHistory {
	c.configDetailChangeHistoryDo.DO = *(c.configDetailChangeHistoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configDetailChangeHistory) updateTableName(table string) *configDetailChangeHistory {
	c.ALL = field.NewAsterisk(table)
	c.ChangeID = field.NewString(table, "change_id")
	c.Before = field.NewString(table, "before")
	c.After = field.NewString(table, "after")
	c.Field = field.NewString(table, "field")
	c.Value = field.NewString(table, "value")
	c.Name = field.NewString(table, "name")
	c.NameCopy = field.NewString(table, "name_copy")
	c.ConfigDetailID = field.NewString(table, "config_detail_id")
	c.CreateUser = field.NewString(table, "create_user")
	c.CreateTime = field.NewString(table, "create_time")
	c.Operation = field.NewString(table, "operation")
	c.GroupID = field.NewString(table, "group_id")

	c.fillFieldMap()

	return c
}

func (c *configDetailChangeHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configDetailChangeHistory) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["change_id"] = c.ChangeID
	c.fieldMap["before"] = c.Before
	c.fieldMap["after"] = c.After
	c.fieldMap["field"] = c.Field
	c.fieldMap["value"] = c.Value
	c.fieldMap["name"] = c.Name
	c.fieldMap["name_copy"] = c.NameCopy
	c.fieldMap["config_detail_id"] = c.ConfigDetailID
	c.fieldMap["create_user"] = c.CreateUser
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["operation"] = c.Operation
	c.fieldMap["group_id"] = c.GroupID
}

func (c configDetailChangeHistory) clone(db *gorm.DB) configDetailChangeHistory {
	c.configDetailChangeHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configDetailChangeHistory) replaceDB(db *gorm.DB) configDetailChangeHistory {
	c.configDetailChangeHistoryDo.ReplaceDB(db)
	return c
}

type configDetailChangeHistoryDo struct{ gen.DO }

type IConfigDetailChangeHistoryDo interface {
	gen.SubQuery
	Debug() IConfigDetailChangeHistoryDo
	WithContext(ctx context.Context) IConfigDetailChangeHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigDetailChangeHistoryDo
	WriteDB() IConfigDetailChangeHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigDetailChangeHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigDetailChangeHistoryDo
	Not(conds ...gen.Condition) IConfigDetailChangeHistoryDo
	Or(conds ...gen.Condition) IConfigDetailChangeHistoryDo
	Select(conds ...field.Expr) IConfigDetailChangeHistoryDo
	Where(conds ...gen.Condition) IConfigDetailChangeHistoryDo
	Order(conds ...field.Expr) IConfigDetailChangeHistoryDo
	Distinct(cols ...field.Expr) IConfigDetailChangeHistoryDo
	Omit(cols ...field.Expr) IConfigDetailChangeHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IConfigDetailChangeHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigDetailChangeHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigDetailChangeHistoryDo
	Group(cols ...field.Expr) IConfigDetailChangeHistoryDo
	Having(conds ...gen.Condition) IConfigDetailChangeHistoryDo
	Limit(limit int) IConfigDetailChangeHistoryDo
	Offset(offset int) IConfigDetailChangeHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigDetailChangeHistoryDo
	Unscoped() IConfigDetailChangeHistoryDo
	Create(values ...*model.ConfigDetailChangeHistory) error
	CreateInBatches(values []*model.ConfigDetailChangeHistory, batchSize int) error
	Save(values ...*model.ConfigDetailChangeHistory) error
	First() (*model.ConfigDetailChangeHistory, error)
	Take() (*model.ConfigDetailChangeHistory, error)
	Last() (*model.ConfigDetailChangeHistory, error)
	Find() ([]*model.ConfigDetailChangeHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigDetailChangeHistory, err error)
	FindInBatches(result *[]*model.ConfigDetailChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ConfigDetailChangeHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigDetailChangeHistoryDo
	Assign(attrs ...field.AssignExpr) IConfigDetailChangeHistoryDo
	Joins(fields ...field.RelationField) IConfigDetailChangeHistoryDo
	Preload(fields ...field.RelationField) IConfigDetailChangeHistoryDo
	FirstOrInit() (*model.ConfigDetailChangeHistory, error)
	FirstOrCreate() (*model.ConfigDetailChangeHistory, error)
	FindByPage(offset int, limit int) (result []*model.ConfigDetailChangeHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigDetailChangeHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configDetailChangeHistoryDo) Debug() IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Debug())
}

func (c configDetailChangeHistoryDo) WithContext(ctx context.Context) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configDetailChangeHistoryDo) ReadDB() IConfigDetailChangeHistoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c configDetailChangeHistoryDo) WriteDB() IConfigDetailChangeHistoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c configDetailChangeHistoryDo) Session(config *gorm.Session) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c configDetailChangeHistoryDo) Clauses(conds ...clause.Expression) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configDetailChangeHistoryDo) Returning(value interface{}, columns ...string) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configDetailChangeHistoryDo) Not(conds ...gen.Condition) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configDetailChangeHistoryDo) Or(conds ...gen.Condition) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configDetailChangeHistoryDo) Select(conds ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configDetailChangeHistoryDo) Where(conds ...gen.Condition) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configDetailChangeHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IConfigDetailChangeHistoryDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c configDetailChangeHistoryDo) Order(conds ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configDetailChangeHistoryDo) Distinct(cols ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configDetailChangeHistoryDo) Omit(cols ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configDetailChangeHistoryDo) Join(table schema.Tabler, on ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configDetailChangeHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configDetailChangeHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configDetailChangeHistoryDo) Group(cols ...field.Expr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configDetailChangeHistoryDo) Having(conds ...gen.Condition) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configDetailChangeHistoryDo) Limit(limit int) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configDetailChangeHistoryDo) Offset(offset int) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configDetailChangeHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configDetailChangeHistoryDo) Unscoped() IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configDetailChangeHistoryDo) Create(values ...*model.ConfigDetailChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configDetailChangeHistoryDo) CreateInBatches(values []*model.ConfigDetailChangeHistory, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configDetailChangeHistoryDo) Save(values ...*model.ConfigDetailChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configDetailChangeHistoryDo) First() (*model.ConfigDetailChangeHistory, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetailChangeHistory), nil
	}
}

func (c configDetailChangeHistoryDo) Take() (*model.ConfigDetailChangeHistory, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetailChangeHistory), nil
	}
}

func (c configDetailChangeHistoryDo) Last() (*model.ConfigDetailChangeHistory, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetailChangeHistory), nil
	}
}

func (c configDetailChangeHistoryDo) Find() ([]*model.ConfigDetailChangeHistory, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConfigDetailChangeHistory), err
}

func (c configDetailChangeHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigDetailChangeHistory, err error) {
	buf := make([]*model.ConfigDetailChangeHistory, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configDetailChangeHistoryDo) FindInBatches(result *[]*model.ConfigDetailChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configDetailChangeHistoryDo) Attrs(attrs ...field.AssignExpr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configDetailChangeHistoryDo) Assign(attrs ...field.AssignExpr) IConfigDetailChangeHistoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configDetailChangeHistoryDo) Joins(fields ...field.RelationField) IConfigDetailChangeHistoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configDetailChangeHistoryDo) Preload(fields ...field.RelationField) IConfigDetailChangeHistoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configDetailChangeHistoryDo) FirstOrInit() (*model.ConfigDetailChangeHistory, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetailChangeHistory), nil
	}
}

func (c configDetailChangeHistoryDo) FirstOrCreate() (*model.ConfigDetailChangeHistory, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetailChangeHistory), nil
	}
}

func (c configDetailChangeHistoryDo) FindByPage(offset int, limit int) (result []*model.ConfigDetailChangeHistory, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configDetailChangeHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configDetailChangeHistoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configDetailChangeHistoryDo) Delete(models ...*model.ConfigDetailChangeHistory) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configDetailChangeHistoryDo) withDO(do gen.Dao) *configDetailChangeHistoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
