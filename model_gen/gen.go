// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	ServerInstance *serverInstance
	SysProjects    *sysProjects
	UserAccount    *userAccount
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ServerInstance = &Q.ServerInstance
	SysProjects = &Q.SysProjects
	UserAccount = &Q.UserAccount
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		ServerInstance: newServerInstance(db, opts...),
		SysProjects:    newSysProjects(db, opts...),
		UserAccount:    newUserAccount(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ServerInstance serverInstance
	SysProjects    sysProjects
	UserAccount    userAccount
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		ServerInstance: q.ServerInstance.clone(db),
		SysProjects:    q.SysProjects.clone(db),
		UserAccount:    q.UserAccount.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		ServerInstance: q.ServerInstance.replaceDB(db),
		SysProjects:    q.SysProjects.replaceDB(db),
		UserAccount:    q.UserAccount.replaceDB(db),
	}
}

type queryCtx struct {
	ServerInstance IServerInstanceDo
	SysProjects    ISysProjectsDo
	UserAccount    IUserAccountDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ServerInstance: q.ServerInstance.WithContext(ctx),
		SysProjects:    q.SysProjects.WithContext(ctx),
		UserAccount:    q.UserAccount.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
