// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newReportGitcommitinfo(db *gorm.DB, opts ...gen.DOOption) reportGitcommitinfo {
	_reportGitcommitinfo := reportGitcommitinfo{}

	_reportGitcommitinfo.reportGitcommitinfoDo.UseDB(db, opts...)
	_reportGitcommitinfo.reportGitcommitinfoDo.UseModel(&model.ReportGitcommitinfo{})

	tableName := _reportGitcommitinfo.reportGitcommitinfoDo.TableName()
	_reportGitcommitinfo.ALL = field.NewAsterisk(tableName)
	_reportGitcommitinfo.PID = field.NewString(tableName, "p_id")
	_reportGitcommitinfo.Ref = field.NewString(tableName, "ref")
	_reportGitcommitinfo.ProjectID = field.NewString(tableName, "project_id")
	_reportGitcommitinfo.ProjectName = field.NewString(tableName, "project_name")
	_reportGitcommitinfo.CommitID = field.NewString(tableName, "commit_id")
	_reportGitcommitinfo.CommitMessage = field.NewString(tableName, "commit_message")
	_reportGitcommitinfo.CommitTime = field.NewTime(tableName, "commit_time")
	_reportGitcommitinfo.CommitAdditions = field.NewInt32(tableName, "commit_additions")
	_reportGitcommitinfo.CommitDeletions = field.NewInt32(tableName, "commit_deletions")
	_reportGitcommitinfo.CommitTotal = field.NewInt32(tableName, "commit_total")
	_reportGitcommitinfo.CommitAuthorName = field.NewString(tableName, "commit_author_name")
	_reportGitcommitinfo.CommitAuthorEmail = field.NewString(tableName, "commit_author_email")
	_reportGitcommitinfo.BatchID = field.NewString(tableName, "batch_id")
	_reportGitcommitinfo.PathWithNamespace = field.NewString(tableName, "path_with_namespace")
	_reportGitcommitinfo.CommitName = field.NewString(tableName, "commit_name")
	_reportGitcommitinfo.CmsUserID = field.NewString(tableName, "cms_user_id")
	_reportGitcommitinfo.CmsUserName = field.NewString(tableName, "cms_user_name")
	_reportGitcommitinfo.CmsUserNick = field.NewString(tableName, "cms_user_nick")
	_reportGitcommitinfo.IssueKey = field.NewString(tableName, "issue_key")
	_reportGitcommitinfo.GroupID = field.NewString(tableName, "group_id")
	_reportGitcommitinfo.ArtifactID = field.NewString(tableName, "artifact_id")

	_reportGitcommitinfo.fillFieldMap()

	return _reportGitcommitinfo
}

type reportGitcommitinfo struct {
	reportGitcommitinfoDo

	ALL               field.Asterisk
	PID               field.String // ID
	Ref               field.String
	ProjectID         field.String // 项目编码
	ProjectName       field.String
	CommitID          field.String
	CommitMessage     field.String
	CommitTime        field.Time
	CommitAdditions   field.Int32
	CommitDeletions   field.Int32
	CommitTotal       field.Int32
	CommitAuthorName  field.String
	CommitAuthorEmail field.String
	BatchID           field.String
	PathWithNamespace field.String
	CommitName        field.String
	CmsUserID         field.String
	CmsUserName       field.String
	CmsUserNick       field.String
	IssueKey          field.String
	GroupID           field.String
	ArtifactID        field.String

	fieldMap map[string]field.Expr
}

func (r reportGitcommitinfo) Table(newTableName string) *reportGitcommitinfo {
	r.reportGitcommitinfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportGitcommitinfo) As(alias string) *reportGitcommitinfo {
	r.reportGitcommitinfoDo.DO = *(r.reportGitcommitinfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportGitcommitinfo) updateTableName(table string) *reportGitcommitinfo {
	r.ALL = field.NewAsterisk(table)
	r.PID = field.NewString(table, "p_id")
	r.Ref = field.NewString(table, "ref")
	r.ProjectID = field.NewString(table, "project_id")
	r.ProjectName = field.NewString(table, "project_name")
	r.CommitID = field.NewString(table, "commit_id")
	r.CommitMessage = field.NewString(table, "commit_message")
	r.CommitTime = field.NewTime(table, "commit_time")
	r.CommitAdditions = field.NewInt32(table, "commit_additions")
	r.CommitDeletions = field.NewInt32(table, "commit_deletions")
	r.CommitTotal = field.NewInt32(table, "commit_total")
	r.CommitAuthorName = field.NewString(table, "commit_author_name")
	r.CommitAuthorEmail = field.NewString(table, "commit_author_email")
	r.BatchID = field.NewString(table, "batch_id")
	r.PathWithNamespace = field.NewString(table, "path_with_namespace")
	r.CommitName = field.NewString(table, "commit_name")
	r.CmsUserID = field.NewString(table, "cms_user_id")
	r.CmsUserName = field.NewString(table, "cms_user_name")
	r.CmsUserNick = field.NewString(table, "cms_user_nick")
	r.IssueKey = field.NewString(table, "issue_key")
	r.GroupID = field.NewString(table, "group_id")
	r.ArtifactID = field.NewString(table, "artifact_id")

	r.fillFieldMap()

	return r
}

func (r *reportGitcommitinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportGitcommitinfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 21)
	r.fieldMap["p_id"] = r.PID
	r.fieldMap["ref"] = r.Ref
	r.fieldMap["project_id"] = r.ProjectID
	r.fieldMap["project_name"] = r.ProjectName
	r.fieldMap["commit_id"] = r.CommitID
	r.fieldMap["commit_message"] = r.CommitMessage
	r.fieldMap["commit_time"] = r.CommitTime
	r.fieldMap["commit_additions"] = r.CommitAdditions
	r.fieldMap["commit_deletions"] = r.CommitDeletions
	r.fieldMap["commit_total"] = r.CommitTotal
	r.fieldMap["commit_author_name"] = r.CommitAuthorName
	r.fieldMap["commit_author_email"] = r.CommitAuthorEmail
	r.fieldMap["batch_id"] = r.BatchID
	r.fieldMap["path_with_namespace"] = r.PathWithNamespace
	r.fieldMap["commit_name"] = r.CommitName
	r.fieldMap["cms_user_id"] = r.CmsUserID
	r.fieldMap["cms_user_name"] = r.CmsUserName
	r.fieldMap["cms_user_nick"] = r.CmsUserNick
	r.fieldMap["issue_key"] = r.IssueKey
	r.fieldMap["group_id"] = r.GroupID
	r.fieldMap["artifact_id"] = r.ArtifactID
}

func (r reportGitcommitinfo) clone(db *gorm.DB) reportGitcommitinfo {
	r.reportGitcommitinfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportGitcommitinfo) replaceDB(db *gorm.DB) reportGitcommitinfo {
	r.reportGitcommitinfoDo.ReplaceDB(db)
	return r
}

type reportGitcommitinfoDo struct{ gen.DO }

type IReportGitcommitinfoDo interface {
	gen.SubQuery
	Debug() IReportGitcommitinfoDo
	WithContext(ctx context.Context) IReportGitcommitinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReportGitcommitinfoDo
	WriteDB() IReportGitcommitinfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReportGitcommitinfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReportGitcommitinfoDo
	Not(conds ...gen.Condition) IReportGitcommitinfoDo
	Or(conds ...gen.Condition) IReportGitcommitinfoDo
	Select(conds ...field.Expr) IReportGitcommitinfoDo
	Where(conds ...gen.Condition) IReportGitcommitinfoDo
	Order(conds ...field.Expr) IReportGitcommitinfoDo
	Distinct(cols ...field.Expr) IReportGitcommitinfoDo
	Omit(cols ...field.Expr) IReportGitcommitinfoDo
	Join(table schema.Tabler, on ...field.Expr) IReportGitcommitinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReportGitcommitinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReportGitcommitinfoDo
	Group(cols ...field.Expr) IReportGitcommitinfoDo
	Having(conds ...gen.Condition) IReportGitcommitinfoDo
	Limit(limit int) IReportGitcommitinfoDo
	Offset(offset int) IReportGitcommitinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReportGitcommitinfoDo
	Unscoped() IReportGitcommitinfoDo
	Create(values ...*model.ReportGitcommitinfo) error
	CreateInBatches(values []*model.ReportGitcommitinfo, batchSize int) error
	Save(values ...*model.ReportGitcommitinfo) error
	First() (*model.ReportGitcommitinfo, error)
	Take() (*model.ReportGitcommitinfo, error)
	Last() (*model.ReportGitcommitinfo, error)
	Find() ([]*model.ReportGitcommitinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportGitcommitinfo, err error)
	FindInBatches(result *[]*model.ReportGitcommitinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReportGitcommitinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReportGitcommitinfoDo
	Assign(attrs ...field.AssignExpr) IReportGitcommitinfoDo
	Joins(fields ...field.RelationField) IReportGitcommitinfoDo
	Preload(fields ...field.RelationField) IReportGitcommitinfoDo
	FirstOrInit() (*model.ReportGitcommitinfo, error)
	FirstOrCreate() (*model.ReportGitcommitinfo, error)
	FindByPage(offset int, limit int) (result []*model.ReportGitcommitinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReportGitcommitinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reportGitcommitinfoDo) Debug() IReportGitcommitinfoDo {
	return r.withDO(r.DO.Debug())
}

func (r reportGitcommitinfoDo) WithContext(ctx context.Context) IReportGitcommitinfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportGitcommitinfoDo) ReadDB() IReportGitcommitinfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportGitcommitinfoDo) WriteDB() IReportGitcommitinfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportGitcommitinfoDo) Session(config *gorm.Session) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportGitcommitinfoDo) Clauses(conds ...clause.Expression) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportGitcommitinfoDo) Returning(value interface{}, columns ...string) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportGitcommitinfoDo) Not(conds ...gen.Condition) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportGitcommitinfoDo) Or(conds ...gen.Condition) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportGitcommitinfoDo) Select(conds ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportGitcommitinfoDo) Where(conds ...gen.Condition) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportGitcommitinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReportGitcommitinfoDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r reportGitcommitinfoDo) Order(conds ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportGitcommitinfoDo) Distinct(cols ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportGitcommitinfoDo) Omit(cols ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportGitcommitinfoDo) Join(table schema.Tabler, on ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportGitcommitinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportGitcommitinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportGitcommitinfoDo) Group(cols ...field.Expr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportGitcommitinfoDo) Having(conds ...gen.Condition) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportGitcommitinfoDo) Limit(limit int) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportGitcommitinfoDo) Offset(offset int) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportGitcommitinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportGitcommitinfoDo) Unscoped() IReportGitcommitinfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportGitcommitinfoDo) Create(values ...*model.ReportGitcommitinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportGitcommitinfoDo) CreateInBatches(values []*model.ReportGitcommitinfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportGitcommitinfoDo) Save(values ...*model.ReportGitcommitinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportGitcommitinfoDo) First() (*model.ReportGitcommitinfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGitcommitinfo), nil
	}
}

func (r reportGitcommitinfoDo) Take() (*model.ReportGitcommitinfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGitcommitinfo), nil
	}
}

func (r reportGitcommitinfoDo) Last() (*model.ReportGitcommitinfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGitcommitinfo), nil
	}
}

func (r reportGitcommitinfoDo) Find() ([]*model.ReportGitcommitinfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportGitcommitinfo), err
}

func (r reportGitcommitinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportGitcommitinfo, err error) {
	buf := make([]*model.ReportGitcommitinfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportGitcommitinfoDo) FindInBatches(result *[]*model.ReportGitcommitinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportGitcommitinfoDo) Attrs(attrs ...field.AssignExpr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportGitcommitinfoDo) Assign(attrs ...field.AssignExpr) IReportGitcommitinfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportGitcommitinfoDo) Joins(fields ...field.RelationField) IReportGitcommitinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportGitcommitinfoDo) Preload(fields ...field.RelationField) IReportGitcommitinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportGitcommitinfoDo) FirstOrInit() (*model.ReportGitcommitinfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGitcommitinfo), nil
	}
}

func (r reportGitcommitinfoDo) FirstOrCreate() (*model.ReportGitcommitinfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGitcommitinfo), nil
	}
}

func (r reportGitcommitinfoDo) FindByPage(offset int, limit int) (result []*model.ReportGitcommitinfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportGitcommitinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportGitcommitinfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportGitcommitinfoDo) Delete(models ...*model.ReportGitcommitinfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportGitcommitinfoDo) withDO(do gen.Dao) *reportGitcommitinfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
