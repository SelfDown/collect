// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newReportGituserFix(db *gorm.DB, opts ...gen.DOOption) reportGituserFix {
	_reportGituserFix := reportGituserFix{}

	_reportGituserFix.reportGituserFixDo.UseDB(db, opts...)
	_reportGituserFix.reportGituserFixDo.UseModel(&model.ReportGituserFix{})

	tableName := _reportGituserFix.reportGituserFixDo.TableName()
	_reportGituserFix.ALL = field.NewAsterisk(tableName)
	_reportGituserFix.PID = field.NewString(tableName, "p_id")
	_reportGituserFix.CmsUserName = field.NewString(tableName, "cms_user_name")
	_reportGituserFix.GitUserName = field.NewString(tableName, "git_user_name")

	_reportGituserFix.fillFieldMap()

	return _reportGituserFix
}

type reportGituserFix struct {
	reportGituserFixDo

	ALL         field.Asterisk
	PID         field.String // ID
	CmsUserName field.String
	GitUserName field.String

	fieldMap map[string]field.Expr
}

func (r reportGituserFix) Table(newTableName string) *reportGituserFix {
	r.reportGituserFixDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportGituserFix) As(alias string) *reportGituserFix {
	r.reportGituserFixDo.DO = *(r.reportGituserFixDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportGituserFix) updateTableName(table string) *reportGituserFix {
	r.ALL = field.NewAsterisk(table)
	r.PID = field.NewString(table, "p_id")
	r.CmsUserName = field.NewString(table, "cms_user_name")
	r.GitUserName = field.NewString(table, "git_user_name")

	r.fillFieldMap()

	return r
}

func (r *reportGituserFix) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportGituserFix) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["p_id"] = r.PID
	r.fieldMap["cms_user_name"] = r.CmsUserName
	r.fieldMap["git_user_name"] = r.GitUserName
}

func (r reportGituserFix) clone(db *gorm.DB) reportGituserFix {
	r.reportGituserFixDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportGituserFix) replaceDB(db *gorm.DB) reportGituserFix {
	r.reportGituserFixDo.ReplaceDB(db)
	return r
}

type reportGituserFixDo struct{ gen.DO }

type IReportGituserFixDo interface {
	gen.SubQuery
	Debug() IReportGituserFixDo
	WithContext(ctx context.Context) IReportGituserFixDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReportGituserFixDo
	WriteDB() IReportGituserFixDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReportGituserFixDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReportGituserFixDo
	Not(conds ...gen.Condition) IReportGituserFixDo
	Or(conds ...gen.Condition) IReportGituserFixDo
	Select(conds ...field.Expr) IReportGituserFixDo
	Where(conds ...gen.Condition) IReportGituserFixDo
	Order(conds ...field.Expr) IReportGituserFixDo
	Distinct(cols ...field.Expr) IReportGituserFixDo
	Omit(cols ...field.Expr) IReportGituserFixDo
	Join(table schema.Tabler, on ...field.Expr) IReportGituserFixDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReportGituserFixDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReportGituserFixDo
	Group(cols ...field.Expr) IReportGituserFixDo
	Having(conds ...gen.Condition) IReportGituserFixDo
	Limit(limit int) IReportGituserFixDo
	Offset(offset int) IReportGituserFixDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReportGituserFixDo
	Unscoped() IReportGituserFixDo
	Create(values ...*model.ReportGituserFix) error
	CreateInBatches(values []*model.ReportGituserFix, batchSize int) error
	Save(values ...*model.ReportGituserFix) error
	First() (*model.ReportGituserFix, error)
	Take() (*model.ReportGituserFix, error)
	Last() (*model.ReportGituserFix, error)
	Find() ([]*model.ReportGituserFix, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportGituserFix, err error)
	FindInBatches(result *[]*model.ReportGituserFix, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReportGituserFix) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReportGituserFixDo
	Assign(attrs ...field.AssignExpr) IReportGituserFixDo
	Joins(fields ...field.RelationField) IReportGituserFixDo
	Preload(fields ...field.RelationField) IReportGituserFixDo
	FirstOrInit() (*model.ReportGituserFix, error)
	FirstOrCreate() (*model.ReportGituserFix, error)
	FindByPage(offset int, limit int) (result []*model.ReportGituserFix, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReportGituserFixDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reportGituserFixDo) Debug() IReportGituserFixDo {
	return r.withDO(r.DO.Debug())
}

func (r reportGituserFixDo) WithContext(ctx context.Context) IReportGituserFixDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportGituserFixDo) ReadDB() IReportGituserFixDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportGituserFixDo) WriteDB() IReportGituserFixDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportGituserFixDo) Session(config *gorm.Session) IReportGituserFixDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportGituserFixDo) Clauses(conds ...clause.Expression) IReportGituserFixDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportGituserFixDo) Returning(value interface{}, columns ...string) IReportGituserFixDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportGituserFixDo) Not(conds ...gen.Condition) IReportGituserFixDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportGituserFixDo) Or(conds ...gen.Condition) IReportGituserFixDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportGituserFixDo) Select(conds ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportGituserFixDo) Where(conds ...gen.Condition) IReportGituserFixDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportGituserFixDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReportGituserFixDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r reportGituserFixDo) Order(conds ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportGituserFixDo) Distinct(cols ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportGituserFixDo) Omit(cols ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportGituserFixDo) Join(table schema.Tabler, on ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportGituserFixDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportGituserFixDo) RightJoin(table schema.Tabler, on ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportGituserFixDo) Group(cols ...field.Expr) IReportGituserFixDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportGituserFixDo) Having(conds ...gen.Condition) IReportGituserFixDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportGituserFixDo) Limit(limit int) IReportGituserFixDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportGituserFixDo) Offset(offset int) IReportGituserFixDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportGituserFixDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReportGituserFixDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportGituserFixDo) Unscoped() IReportGituserFixDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportGituserFixDo) Create(values ...*model.ReportGituserFix) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportGituserFixDo) CreateInBatches(values []*model.ReportGituserFix, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportGituserFixDo) Save(values ...*model.ReportGituserFix) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportGituserFixDo) First() (*model.ReportGituserFix, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGituserFix), nil
	}
}

func (r reportGituserFixDo) Take() (*model.ReportGituserFix, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGituserFix), nil
	}
}

func (r reportGituserFixDo) Last() (*model.ReportGituserFix, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGituserFix), nil
	}
}

func (r reportGituserFixDo) Find() ([]*model.ReportGituserFix, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportGituserFix), err
}

func (r reportGituserFixDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportGituserFix, err error) {
	buf := make([]*model.ReportGituserFix, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportGituserFixDo) FindInBatches(result *[]*model.ReportGituserFix, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportGituserFixDo) Attrs(attrs ...field.AssignExpr) IReportGituserFixDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportGituserFixDo) Assign(attrs ...field.AssignExpr) IReportGituserFixDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportGituserFixDo) Joins(fields ...field.RelationField) IReportGituserFixDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportGituserFixDo) Preload(fields ...field.RelationField) IReportGituserFixDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportGituserFixDo) FirstOrInit() (*model.ReportGituserFix, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGituserFix), nil
	}
}

func (r reportGituserFixDo) FirstOrCreate() (*model.ReportGituserFix, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportGituserFix), nil
	}
}

func (r reportGituserFixDo) FindByPage(offset int, limit int) (result []*model.ReportGituserFix, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportGituserFixDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportGituserFixDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportGituserFixDo) Delete(models ...*model.ReportGituserFix) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportGituserFixDo) withDO(do gen.Dao) *reportGituserFixDo {
	r.DO = *do.(*gen.DO)
	return r
}
