// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newUserAccount(db *gorm.DB, opts ...gen.DOOption) userAccount {
	_userAccount := userAccount{}

	_userAccount.userAccountDo.UseDB(db, opts...)
	_userAccount.userAccountDo.UseModel(&model.UserAccount{})

	tableName := _userAccount.userAccountDo.TableName()
	_userAccount.ALL = field.NewAsterisk(tableName)
	_userAccount.UserID = field.NewString(tableName, "user_id")
	_userAccount.Nick = field.NewString(tableName, "nick")
	_userAccount.UserName = field.NewString(tableName, "user_name")
	_userAccount.Password = field.NewString(tableName, "password")
	_userAccount.UserStatus = field.NewString(tableName, "user_status")
	_userAccount.EntryDate = field.NewString(tableName, "entry_date")
	_userAccount.Email = field.NewString(tableName, "email")
	_userAccount.Phone = field.NewString(tableName, "phone")
	_userAccount.LeaveDate = field.NewString(tableName, "leave_date")
	_userAccount.IsDelete = field.NewString(tableName, "is_delete")
	_userAccount.CreateTime = field.NewString(tableName, "create_time")
	_userAccount.CreateUser = field.NewString(tableName, "create_user")
	_userAccount.ModifyUser = field.NewString(tableName, "modify_user")
	_userAccount.ModifyTime = field.NewString(tableName, "modify_time")
	_userAccount.WorkCode = field.NewString(tableName, "work_code")
	_userAccount.CreateLdap = field.NewString(tableName, "create_ldap")
	_userAccount.LadpUserLoginID = field.NewString(tableName, "ladp_user_login_id")
	_userAccount.LeaveReason = field.NewString(tableName, "leave_reason")
	_userAccount.WechatID = field.NewString(tableName, "wechat_id")
	_userAccount.AttendanceID = field.NewString(tableName, "attendance_id")

	_userAccount.fillFieldMap()

	return _userAccount
}

type userAccount struct {
	userAccountDo

	ALL             field.Asterisk
	UserID          field.String
	Nick            field.String
	UserName        field.String
	Password        field.String
	UserStatus      field.String
	EntryDate       field.String
	Email           field.String
	Phone           field.String
	LeaveDate       field.String
	IsDelete        field.String
	CreateTime      field.String
	CreateUser      field.String
	ModifyUser      field.String
	ModifyTime      field.String
	WorkCode        field.String
	CreateLdap      field.String
	LadpUserLoginID field.String
	LeaveReason     field.String
	WechatID        field.String
	AttendanceID    field.String

	fieldMap map[string]field.Expr
}

func (u userAccount) Table(newTableName string) *userAccount {
	u.userAccountDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAccount) As(alias string) *userAccount {
	u.userAccountDo.DO = *(u.userAccountDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAccount) updateTableName(table string) *userAccount {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewString(table, "user_id")
	u.Nick = field.NewString(table, "nick")
	u.UserName = field.NewString(table, "user_name")
	u.Password = field.NewString(table, "password")
	u.UserStatus = field.NewString(table, "user_status")
	u.EntryDate = field.NewString(table, "entry_date")
	u.Email = field.NewString(table, "email")
	u.Phone = field.NewString(table, "phone")
	u.LeaveDate = field.NewString(table, "leave_date")
	u.IsDelete = field.NewString(table, "is_delete")
	u.CreateTime = field.NewString(table, "create_time")
	u.CreateUser = field.NewString(table, "create_user")
	u.ModifyUser = field.NewString(table, "modify_user")
	u.ModifyTime = field.NewString(table, "modify_time")
	u.WorkCode = field.NewString(table, "work_code")
	u.CreateLdap = field.NewString(table, "create_ldap")
	u.LadpUserLoginID = field.NewString(table, "ladp_user_login_id")
	u.LeaveReason = field.NewString(table, "leave_reason")
	u.WechatID = field.NewString(table, "wechat_id")
	u.AttendanceID = field.NewString(table, "attendance_id")

	u.fillFieldMap()

	return u
}

func (u *userAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAccount) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 20)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["nick"] = u.Nick
	u.fieldMap["user_name"] = u.UserName
	u.fieldMap["password"] = u.Password
	u.fieldMap["user_status"] = u.UserStatus
	u.fieldMap["entry_date"] = u.EntryDate
	u.fieldMap["email"] = u.Email
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["leave_date"] = u.LeaveDate
	u.fieldMap["is_delete"] = u.IsDelete
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["create_user"] = u.CreateUser
	u.fieldMap["modify_user"] = u.ModifyUser
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["work_code"] = u.WorkCode
	u.fieldMap["create_ldap"] = u.CreateLdap
	u.fieldMap["ladp_user_login_id"] = u.LadpUserLoginID
	u.fieldMap["leave_reason"] = u.LeaveReason
	u.fieldMap["wechat_id"] = u.WechatID
	u.fieldMap["attendance_id"] = u.AttendanceID
}

func (u userAccount) clone(db *gorm.DB) userAccount {
	u.userAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAccount) replaceDB(db *gorm.DB) userAccount {
	u.userAccountDo.ReplaceDB(db)
	return u
}

type userAccountDo struct{ gen.DO }

type IUserAccountDo interface {
	gen.SubQuery
	Debug() IUserAccountDo
	WithContext(ctx context.Context) IUserAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAccountDo
	WriteDB() IUserAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAccountDo
	Not(conds ...gen.Condition) IUserAccountDo
	Or(conds ...gen.Condition) IUserAccountDo
	Select(conds ...field.Expr) IUserAccountDo
	Where(conds ...gen.Condition) IUserAccountDo
	Order(conds ...field.Expr) IUserAccountDo
	Distinct(cols ...field.Expr) IUserAccountDo
	Omit(cols ...field.Expr) IUserAccountDo
	Join(table schema.Tabler, on ...field.Expr) IUserAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAccountDo
	Group(cols ...field.Expr) IUserAccountDo
	Having(conds ...gen.Condition) IUserAccountDo
	Limit(limit int) IUserAccountDo
	Offset(offset int) IUserAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccountDo
	Unscoped() IUserAccountDo
	Create(values ...*model.UserAccount) error
	CreateInBatches(values []*model.UserAccount, batchSize int) error
	Save(values ...*model.UserAccount) error
	First() (*model.UserAccount, error)
	Take() (*model.UserAccount, error)
	Last() (*model.UserAccount, error)
	Find() ([]*model.UserAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAccount, err error)
	FindInBatches(result *[]*model.UserAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAccountDo
	Assign(attrs ...field.AssignExpr) IUserAccountDo
	Joins(fields ...field.RelationField) IUserAccountDo
	Preload(fields ...field.RelationField) IUserAccountDo
	FirstOrInit() (*model.UserAccount, error)
	FirstOrCreate() (*model.UserAccount, error)
	FindByPage(offset int, limit int) (result []*model.UserAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAccountDo) Debug() IUserAccountDo {
	return u.withDO(u.DO.Debug())
}

func (u userAccountDo) WithContext(ctx context.Context) IUserAccountDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAccountDo) ReadDB() IUserAccountDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAccountDo) WriteDB() IUserAccountDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAccountDo) Session(config *gorm.Session) IUserAccountDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAccountDo) Clauses(conds ...clause.Expression) IUserAccountDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAccountDo) Returning(value interface{}, columns ...string) IUserAccountDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAccountDo) Not(conds ...gen.Condition) IUserAccountDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAccountDo) Or(conds ...gen.Condition) IUserAccountDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAccountDo) Select(conds ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAccountDo) Where(conds ...gen.Condition) IUserAccountDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAccountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserAccountDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userAccountDo) Order(conds ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAccountDo) Distinct(cols ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAccountDo) Omit(cols ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAccountDo) Join(table schema.Tabler, on ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAccountDo) Group(cols ...field.Expr) IUserAccountDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAccountDo) Having(conds ...gen.Condition) IUserAccountDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAccountDo) Limit(limit int) IUserAccountDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAccountDo) Offset(offset int) IUserAccountDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccountDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAccountDo) Unscoped() IUserAccountDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAccountDo) Create(values ...*model.UserAccount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAccountDo) CreateInBatches(values []*model.UserAccount, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAccountDo) Save(values ...*model.UserAccount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAccountDo) First() (*model.UserAccount, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccount), nil
	}
}

func (u userAccountDo) Take() (*model.UserAccount, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccount), nil
	}
}

func (u userAccountDo) Last() (*model.UserAccount, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccount), nil
	}
}

func (u userAccountDo) Find() ([]*model.UserAccount, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAccount), err
}

func (u userAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAccount, err error) {
	buf := make([]*model.UserAccount, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAccountDo) FindInBatches(result *[]*model.UserAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAccountDo) Attrs(attrs ...field.AssignExpr) IUserAccountDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAccountDo) Assign(attrs ...field.AssignExpr) IUserAccountDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAccountDo) Joins(fields ...field.RelationField) IUserAccountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAccountDo) Preload(fields ...field.RelationField) IUserAccountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAccountDo) FirstOrInit() (*model.UserAccount, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccount), nil
	}
}

func (u userAccountDo) FirstOrCreate() (*model.UserAccount, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccount), nil
	}
}

func (u userAccountDo) FindByPage(offset int, limit int) (result []*model.UserAccount, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAccountDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAccountDo) Delete(models ...*model.UserAccount) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAccountDo) withDO(do gen.Dao) *userAccountDo {
	u.DO = *do.(*gen.DO)
	return u
}
