// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"collect/model"
)

func newUserChangeHistory(db *gorm.DB, opts ...gen.DOOption) userChangeHistory {
	_userChangeHistory := userChangeHistory{}

	_userChangeHistory.userChangeHistoryDo.UseDB(db, opts...)
	_userChangeHistory.userChangeHistoryDo.UseModel(&model.UserChangeHistory{})

	tableName := _userChangeHistory.userChangeHistoryDo.TableName()
	_userChangeHistory.ALL = field.NewAsterisk(tableName)
	_userChangeHistory.ChangeID = field.NewString(tableName, "change_id")
	_userChangeHistory.Before = field.NewString(tableName, "before")
	_userChangeHistory.After = field.NewString(tableName, "after")
	_userChangeHistory.Field = field.NewString(tableName, "field")
	_userChangeHistory.Value = field.NewString(tableName, "value")
	_userChangeHistory.Name = field.NewString(tableName, "name")
	_userChangeHistory.UserID = field.NewString(tableName, "user_id")
	_userChangeHistory.CreateUser = field.NewString(tableName, "create_user")
	_userChangeHistory.CreateTime = field.NewString(tableName, "create_time")
	_userChangeHistory.Operation = field.NewString(tableName, "operation")

	_userChangeHistory.fillFieldMap()

	return _userChangeHistory
}

type userChangeHistory struct {
	userChangeHistoryDo

	ALL        field.Asterisk
	ChangeID   field.String
	Before     field.String
	After      field.String
	Field      field.String
	Value      field.String
	Name       field.String
	UserID     field.String
	CreateUser field.String
	CreateTime field.String
	Operation  field.String

	fieldMap map[string]field.Expr
}

func (u userChangeHistory) Table(newTableName string) *userChangeHistory {
	u.userChangeHistoryDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userChangeHistory) As(alias string) *userChangeHistory {
	u.userChangeHistoryDo.DO = *(u.userChangeHistoryDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userChangeHistory) updateTableName(table string) *userChangeHistory {
	u.ALL = field.NewAsterisk(table)
	u.ChangeID = field.NewString(table, "change_id")
	u.Before = field.NewString(table, "before")
	u.After = field.NewString(table, "after")
	u.Field = field.NewString(table, "field")
	u.Value = field.NewString(table, "value")
	u.Name = field.NewString(table, "name")
	u.UserID = field.NewString(table, "user_id")
	u.CreateUser = field.NewString(table, "create_user")
	u.CreateTime = field.NewString(table, "create_time")
	u.Operation = field.NewString(table, "operation")

	u.fillFieldMap()

	return u
}

func (u *userChangeHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userChangeHistory) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["change_id"] = u.ChangeID
	u.fieldMap["before"] = u.Before
	u.fieldMap["after"] = u.After
	u.fieldMap["field"] = u.Field
	u.fieldMap["value"] = u.Value
	u.fieldMap["name"] = u.Name
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["create_user"] = u.CreateUser
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["operation"] = u.Operation
}

func (u userChangeHistory) clone(db *gorm.DB) userChangeHistory {
	u.userChangeHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userChangeHistory) replaceDB(db *gorm.DB) userChangeHistory {
	u.userChangeHistoryDo.ReplaceDB(db)
	return u
}

type userChangeHistoryDo struct{ gen.DO }

type IUserChangeHistoryDo interface {
	gen.SubQuery
	Debug() IUserChangeHistoryDo
	WithContext(ctx context.Context) IUserChangeHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserChangeHistoryDo
	WriteDB() IUserChangeHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserChangeHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserChangeHistoryDo
	Not(conds ...gen.Condition) IUserChangeHistoryDo
	Or(conds ...gen.Condition) IUserChangeHistoryDo
	Select(conds ...field.Expr) IUserChangeHistoryDo
	Where(conds ...gen.Condition) IUserChangeHistoryDo
	Order(conds ...field.Expr) IUserChangeHistoryDo
	Distinct(cols ...field.Expr) IUserChangeHistoryDo
	Omit(cols ...field.Expr) IUserChangeHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IUserChangeHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserChangeHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserChangeHistoryDo
	Group(cols ...field.Expr) IUserChangeHistoryDo
	Having(conds ...gen.Condition) IUserChangeHistoryDo
	Limit(limit int) IUserChangeHistoryDo
	Offset(offset int) IUserChangeHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserChangeHistoryDo
	Unscoped() IUserChangeHistoryDo
	Create(values ...*model.UserChangeHistory) error
	CreateInBatches(values []*model.UserChangeHistory, batchSize int) error
	Save(values ...*model.UserChangeHistory) error
	First() (*model.UserChangeHistory, error)
	Take() (*model.UserChangeHistory, error)
	Last() (*model.UserChangeHistory, error)
	Find() ([]*model.UserChangeHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserChangeHistory, err error)
	FindInBatches(result *[]*model.UserChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserChangeHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserChangeHistoryDo
	Assign(attrs ...field.AssignExpr) IUserChangeHistoryDo
	Joins(fields ...field.RelationField) IUserChangeHistoryDo
	Preload(fields ...field.RelationField) IUserChangeHistoryDo
	FirstOrInit() (*model.UserChangeHistory, error)
	FirstOrCreate() (*model.UserChangeHistory, error)
	FindByPage(offset int, limit int) (result []*model.UserChangeHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserChangeHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userChangeHistoryDo) Debug() IUserChangeHistoryDo {
	return u.withDO(u.DO.Debug())
}

func (u userChangeHistoryDo) WithContext(ctx context.Context) IUserChangeHistoryDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userChangeHistoryDo) ReadDB() IUserChangeHistoryDo {
	return u.Clauses(dbresolver.Read)
}

func (u userChangeHistoryDo) WriteDB() IUserChangeHistoryDo {
	return u.Clauses(dbresolver.Write)
}

func (u userChangeHistoryDo) Session(config *gorm.Session) IUserChangeHistoryDo {
	return u.withDO(u.DO.Session(config))
}

func (u userChangeHistoryDo) Clauses(conds ...clause.Expression) IUserChangeHistoryDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userChangeHistoryDo) Returning(value interface{}, columns ...string) IUserChangeHistoryDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userChangeHistoryDo) Not(conds ...gen.Condition) IUserChangeHistoryDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userChangeHistoryDo) Or(conds ...gen.Condition) IUserChangeHistoryDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userChangeHistoryDo) Select(conds ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userChangeHistoryDo) Where(conds ...gen.Condition) IUserChangeHistoryDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userChangeHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserChangeHistoryDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userChangeHistoryDo) Order(conds ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userChangeHistoryDo) Distinct(cols ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userChangeHistoryDo) Omit(cols ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userChangeHistoryDo) Join(table schema.Tabler, on ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userChangeHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userChangeHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userChangeHistoryDo) Group(cols ...field.Expr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userChangeHistoryDo) Having(conds ...gen.Condition) IUserChangeHistoryDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userChangeHistoryDo) Limit(limit int) IUserChangeHistoryDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userChangeHistoryDo) Offset(offset int) IUserChangeHistoryDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userChangeHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserChangeHistoryDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userChangeHistoryDo) Unscoped() IUserChangeHistoryDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userChangeHistoryDo) Create(values ...*model.UserChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userChangeHistoryDo) CreateInBatches(values []*model.UserChangeHistory, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userChangeHistoryDo) Save(values ...*model.UserChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userChangeHistoryDo) First() (*model.UserChangeHistory, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChangeHistory), nil
	}
}

func (u userChangeHistoryDo) Take() (*model.UserChangeHistory, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChangeHistory), nil
	}
}

func (u userChangeHistoryDo) Last() (*model.UserChangeHistory, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChangeHistory), nil
	}
}

func (u userChangeHistoryDo) Find() ([]*model.UserChangeHistory, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserChangeHistory), err
}

func (u userChangeHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserChangeHistory, err error) {
	buf := make([]*model.UserChangeHistory, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userChangeHistoryDo) FindInBatches(result *[]*model.UserChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userChangeHistoryDo) Attrs(attrs ...field.AssignExpr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userChangeHistoryDo) Assign(attrs ...field.AssignExpr) IUserChangeHistoryDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userChangeHistoryDo) Joins(fields ...field.RelationField) IUserChangeHistoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userChangeHistoryDo) Preload(fields ...field.RelationField) IUserChangeHistoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userChangeHistoryDo) FirstOrInit() (*model.UserChangeHistory, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChangeHistory), nil
	}
}

func (u userChangeHistoryDo) FirstOrCreate() (*model.UserChangeHistory, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChangeHistory), nil
	}
}

func (u userChangeHistoryDo) FindByPage(offset int, limit int) (result []*model.UserChangeHistory, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userChangeHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userChangeHistoryDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userChangeHistoryDo) Delete(models ...*model.UserChangeHistory) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userChangeHistoryDo) withDO(do gen.Dao) *userChangeHistoryDo {
	u.DO = *do.(*gen.DO)
	return u
}
